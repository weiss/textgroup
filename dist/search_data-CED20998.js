searchData={"items":[{"type":"module","title":"textgroup_acceptor","doc":null,"ref":"textgroup_acceptor.html"},{"type":"function","title":"textgroup_acceptor.init/1","doc":null,"ref":"textgroup_acceptor.html#init/1"},{"type":"function","title":"textgroup_acceptor.loop/1","doc":null,"ref":"textgroup_acceptor.html#loop/1"},{"type":"function","title":"textgroup_acceptor.start_link/1","doc":null,"ref":"textgroup_acceptor.html#start_link/1"},{"type":"function","title":"textgroup_acceptor.system_code_change/4","doc":null,"ref":"textgroup_acceptor.html#system_code_change/4"},{"type":"function","title":"textgroup_acceptor.system_continue/3","doc":null,"ref":"textgroup_acceptor.html#system_continue/3"},{"type":"function","title":"textgroup_acceptor.system_terminate/4","doc":null,"ref":"textgroup_acceptor.html#system_terminate/4"},{"type":"opaque","title":"textgroup_acceptor.state/0","doc":null,"ref":"textgroup_acceptor.html#t:state/0"},{"type":"module","title":"textgroup_acceptor_sup","doc":null,"ref":"textgroup_acceptor_sup.html"},{"type":"function","title":"textgroup_acceptor_sup.init/1","doc":null,"ref":"textgroup_acceptor_sup.html#init/1"},{"type":"function","title":"textgroup_acceptor_sup.start_link/0","doc":null,"ref":"textgroup_acceptor_sup.html#start_link/0"},{"type":"module","title":"textgroup_app","doc":null,"ref":"textgroup_app.html"},{"type":"function","title":"textgroup_app.config_change/3","doc":null,"ref":"textgroup_app.html#config_change/3"},{"type":"function","title":"textgroup_app.prep_stop/1","doc":null,"ref":"textgroup_app.html#prep_stop/1"},{"type":"function","title":"textgroup_app.start/2","doc":null,"ref":"textgroup_app.html#start/2"},{"type":"function","title":"textgroup_app.stop/1","doc":null,"ref":"textgroup_app.html#stop/1"},{"type":"module","title":"textgroup_client","doc":null,"ref":"textgroup_client.html"},{"type":"function","title":"textgroup_client.code_change/3","doc":null,"ref":"textgroup_client.html#code_change/3"},{"type":"function","title":"textgroup_client.get_address/1","doc":null,"ref":"textgroup_client.html#get_address/1"},{"type":"function","title":"textgroup_client.handle_call/3","doc":null,"ref":"textgroup_client.html#handle_call/3"},{"type":"function","title":"textgroup_client.handle_cast/2","doc":null,"ref":"textgroup_client.html#handle_cast/2"},{"type":"function","title":"textgroup_client.handle_info/2","doc":null,"ref":"textgroup_client.html#handle_info/2"},{"type":"function","title":"textgroup_client.init/1","doc":null,"ref":"textgroup_client.html#init/1"},{"type":"function","title":"textgroup_client.send/2","doc":null,"ref":"textgroup_client.html#send/2"},{"type":"function","title":"textgroup_client.start/1","doc":null,"ref":"textgroup_client.html#start/1"},{"type":"function","title":"textgroup_client.start_link/1","doc":null,"ref":"textgroup_client.html#start_link/1"},{"type":"function","title":"textgroup_client.terminate/2","doc":null,"ref":"textgroup_client.html#terminate/2"},{"type":"opaque","title":"textgroup_client.state/0","doc":null,"ref":"textgroup_client.html#t:state/0"},{"type":"module","title":"textgroup_client_sup","doc":null,"ref":"textgroup_client_sup.html"},{"type":"function","title":"textgroup_client_sup.init/1","doc":null,"ref":"textgroup_client_sup.html#init/1"},{"type":"function","title":"textgroup_client_sup.start_link/0","doc":null,"ref":"textgroup_client_sup.html#start_link/0"},{"type":"module","title":"textgroup_sup","doc":null,"ref":"textgroup_sup.html"},{"type":"function","title":"textgroup_sup.init/1","doc":null,"ref":"textgroup_sup.html#init/1"},{"type":"function","title":"textgroup_sup.start_link/0","doc":null,"ref":"textgroup_sup.html#start_link/0"},{"type":"module","title":"textgroup_systemd","doc":null,"ref":"textgroup_systemd.html"},{"type":"function","title":"textgroup_systemd.code_change/3","doc":null,"ref":"textgroup_systemd.html#code_change/3"},{"type":"function","title":"textgroup_systemd.handle_call/3","doc":null,"ref":"textgroup_systemd.html#handle_call/3"},{"type":"function","title":"textgroup_systemd.handle_cast/2","doc":null,"ref":"textgroup_systemd.html#handle_cast/2"},{"type":"function","title":"textgroup_systemd.handle_info/2","doc":null,"ref":"textgroup_systemd.html#handle_info/2"},{"type":"function","title":"textgroup_systemd.init/1","doc":null,"ref":"textgroup_systemd.html#init/1"},{"type":"function","title":"textgroup_systemd.ready/0","doc":null,"ref":"textgroup_systemd.html#ready/0"},{"type":"function","title":"textgroup_systemd.reloading/0","doc":null,"ref":"textgroup_systemd.html#reloading/0"},{"type":"function","title":"textgroup_systemd.start_link/0","doc":null,"ref":"textgroup_systemd.html#start_link/0"},{"type":"function","title":"textgroup_systemd.stopping/0","doc":null,"ref":"textgroup_systemd.html#stopping/0"},{"type":"function","title":"textgroup_systemd.terminate/2","doc":null,"ref":"textgroup_systemd.html#terminate/2"},{"type":"opaque","title":"textgroup_systemd.state/0","doc":null,"ref":"textgroup_systemd.html#t:state/0"},{"type":"extras","title":"Overview","doc":"# Textgroup\n\n[![CI](https://github.com/weiss/textgroup/actions/workflows/ci.yml/badge.svg)][ci]\n\n[Textgroup][textgroup] is a groupchat service usable with TCP clients such as\nTelnet or Netcat. The purpose of this project is to serve as an example\napplication for Erlang/OTP newcomers.","ref":"readme.html"},{"type":"extras","title":"Requirements - Overview","doc":"- [Erlang/OTP][erlang] (22 or newer).\n- [Rebar3][rebar3] (3.16.0 or newer).","ref":"readme.html#requirements"},{"type":"extras","title":"Quick Test - Overview","doc":"The Textgroup service can be compiled and started [with an Erlang shell][shell]\nby running the following command:\n\n```shell\nrebar3 shell\n```\n\nThe service is stopped by calling `q().` within that shell.","ref":"readme.html#quick-test"},{"type":"extras","title":"Continuous Integration - Overview","doc":"The results of continuous integration tests can be viewed [on GitHub][ci],\nincluding test suite [logs][ct_logs] and [coverage][coverage] analysis.","ref":"readme.html#continuous-integration"},{"type":"extras","title":"Documentation - Overview","doc":"There's documentation for [users][users], [operators][ops], and\n[developers][devs] on the Textgroup [web site][textgroup].\n\n[textgroup]: https://weiss.github.io/textgroup/\n[erlang]: https://erlang.org\n[rebar3]: https://rebar3.org\n[shell]: https://ferd.ca/rebar3-shell.html\n[ci]: https://github.com/weiss/textgroup/actions/workflows/ci.yml\n[ct_logs]: https://weiss.github.io/textgroup/logs/\n[coverage]: https://weiss.github.io/textgroup/cover/\n[users]: https://weiss.github.io/textgroup/users.html\n[ops]: https://weiss.github.io/textgroup/operators.html\n[devs]: https://weiss.github.io/textgroup/developers.html","ref":"readme.html#documentation"},{"type":"extras","title":"For Users","doc":"# For Users\n\nTextgroup can be used with TCP clients such as Telnet or Netcat. For example:\n\n```shell\ntelnet localhost 1111\n```\n\nOnce connected, the server understands the following commands:","ref":"users.html"},{"type":"extras","title":"peers - For Users","doc":"Show the IP addresses of your current peers.","ref":"users.html#peers"},{"type":"extras","title":"stats - For Users","doc":"Show some statistic regarding the current session.","ref":"users.html#stats"},{"type":"extras","title":"help - For Users","doc":"Show a help message.","ref":"users.html#help"},{"type":"extras","title":"quit - For Users","doc":"Quit the current session.\n\n_Any other messages are sent to all connected peers._","ref":"users.html#quit"},{"type":"extras","title":"For Operators","doc":"# For Operators","ref":"operators.html"},{"type":"extras","title":"Building Textgroup - For Operators","doc":"The Textgroup source code can be retrieved and built using the following\ncommands. This requires [Erlang/OTP][erlang] and [Rebar3][rebar3] to be\nin the `$PATH`.\n\n```shell\ncurl -L https://github.com/weiss/textgroup/archive/v0.1.0.tar.gz | tar -C /tmp -xzf -\ncd /tmp/textgroup-0.1.0\nrebar3 as prod tar\n```","ref":"operators.html#building-textgroup"},{"type":"extras","title":"Deploying Textgroup - For Operators","doc":"The self-contained [release][release] archive built in the previous step\nincludes the required parts of Erlang/OTP and can be extracted to an arbitrary\nlocation. For a persistent installation, the administrator might want to create\na dedicated `_textgroup` user and extract the release archive into that user's\n`$HOME` directory:\n\n```shell\nsudo useradd -m -d /opt/textgroup _textgroup\nsudo tar -C /opt/textgroup -xzf /tmp/textgroup-0.1.0/_build/prod/rel/textgroup/textgroup-0.1.0.tar.gz\nsudo chown -R -h _textgroup:_textgroup /opt/textgroup\n```\n\nA systemd service unit could be installed and enabled like this:\n\n```shell\nsudo cp /opt/textgroup/etc/systemd/system/textgroup.service /etc/systemd/system\nsudo systemctl daemon-reload\nsudo systemctl --now enable textgroup\n```","ref":"operators.html#deploying-textgroup"},{"type":"extras","title":"Configuring Textgroup - For Operators","doc":"The `/opt/textgroup/releases/0.1.0/sys.config` file may be edited in order to\nadjust configuration settings such as the TCP port number. As an alternative,\nthose settings can be overridden on the command line in the systemd unit. For\nexample, run `sudo systemctl edit textgroup` and enter:\n\n```ini\n[Service]\nExecStart=\nExecStart=/opt/textgroup/bin/textgroup foreground -textgroup port 1111\n```","ref":"operators.html#configuring-textgroup"},{"type":"extras","title":"Controlling Textgroup - For Operators","doc":"The Textgroup service can be controlled using the `textgroup` command. The\ncaller must have the same `.erlang.cookie` file (with correct permissions) in\ntheir `$HOME` directory as the user running Textgroup. For a list of available\ncommands, see:\n\n```shell\n/opt/textgroup/bin/textgroup help\n```\n\nThe log output can be viewed with:\n\n```shell\nsudo journalctl -u textgroup\n```","ref":"operators.html#controlling-textgroup"},{"type":"extras","title":"Advanced: Upgrading Textgroup - For Operators","doc":"To create a new release that can be used to hot-upgrade the old one:\n\n```shell\ncd /tmp/textgroup-0.1.0\nrebar3 as prod release\neditor src/*.erl\nsed -i s/0.1.0/0.2.0/ rebar.config src/textgroup.app.src\nrebar3 as prod release\nrebar3 as prod appup generate\nrebar3 as prod relup -n textgroup -v 0.2.0\nrebar3 as prod tar\n```\n\nThe new release archive must then be copied into place (run this command and the\nfollowing ones as the `_textgroup` user):\n\n```shell\ncp /tmp/textgroup-0.1.0/_build/prod/rel/textgroup/textgroup-0.2.0.tar.gz /opt/textgroup/releases\n```\n\nFinally, the actual upgrade of the running service is performed like this:\n\n```shell\n/opt/textgroup/bin/textgroup upgrade 0.2.0\n```\n\nIf the new release doesn't work as expected, a downgrade to the old one can be\nperformed:\n\n```shell\n/opt/textgroup/bin/textgroup downgrade 0.1.0\n```\n\nThe unused release can then be removed. E.g., to uninstall the new one after\ndowngrading:\n\n```shell\n/opt/textgroup/bin/textgroup uninstall 0.2.0\n```\n\nA few caveats: If data structures (such as the `client_state` record) were\nmodified, converting them during the upgrade might require [additional\nhandling][appup_plugin]. Complex applications/dependencies may well need\nexplicit support for hot release upgrades, such as custom [appup][appup] files.\nAlso, if a different Erlang/OTP version is used to build a new release, the\nupgrade process involves a [restart of the emulator][restart]. For this to\nwork, the [heart][heart] functionality must be enabled.\n\n[erlang]: https://erlang.org\n[rebar3]: https://rebar3.org\n[release]: https://erlang.org/doc/design_principles/release_structure.html\n[appup_plugin]: https://github.com/lrascao/rebar3_appup_plugin\n[appup]: https://erlang.org/doc/design_principles/appup_cookbook.html\n[restart]: https://erlang.org/doc/system_principles/upgrade.html\n[heart]: https://erlang.org/doc/man/heart.html","ref":"operators.html#advanced-upgrading-textgroup"},{"type":"extras","title":"For Developers","doc":"# For Developers","ref":"developers.html"},{"type":"extras","title":"Development - For Developers","doc":"Textgroup development requires [Erlang/OTP][erlang] and [Rebar3][rebar3] to be\nin the `$PATH`.\n\n#","ref":"developers.html#development"},{"type":"extras","title":"Building Textgroup - For Developers","doc":"```shell\nrebar3 compile\n```\n\n#","ref":"developers.html#building-textgroup"},{"type":"extras","title":"Testing Textgroup - For Developers","doc":"```shell\nrebar3 check\n```\n\n#","ref":"developers.html#testing-textgroup"},{"type":"extras","title":"Running Textgroup - For Developers","doc":"```shell\nrebar3 shell\n```\n\n#","ref":"developers.html#running-textgroup"},{"type":"extras","title":"Creating Textgroup Documentation - For Developers","doc":"```shell\nrebar3 ex_doc\n```\n\n#","ref":"developers.html#creating-textgroup-documentation"},{"type":"extras","title":"Creating a Textgroup Release - For Developers","doc":"```shell\nrebar3 release\n```\n\nSee the [operator documentation][ops] for hints on how to deploy and run such a\nrelease.","ref":"developers.html#creating-a-textgroup-release"},{"type":"extras","title":"Design Hints - For Developers","doc":"The Textgroup service uses the [supervision tree][supervision] shown below: The\n[main][textgroup_sup] supervisor starts a worker child (for integrating with\nsystemd) and two supervisor childs, [one][acceptor_sup] for supervising a\nfixed-size pool of [five][pool_size] TCP connection acceptors, and\n[another][client_sup] one for supervising dynamically created connection\nhandlers, one per client (there's six of them, in this example).\n\n![Supervision tree][tree]\n\nThis is a straightforward structure, _except_ that the acceptor processes work\nin a somewhat non-ideomatic way. However, don't let the\n[implementation][acceptor] confuse you: Maybe just view it as a blackbox for the\nmoment. Once everything else seems clear, here's an explanation of what's going\non in the `textgroup_acceptor` module:\n\n- Each acceptor process blocks in `gen_tcp:accept/2` while waiting for a new\n  connection. The [problem][problem] is: While waiting, the process is\n  unresponsive to [system messages][sys]. Basically, OTP processes are supposed\n  to only ever wait for _Erlang_ messages, to handle those in callback\n  functions, and to return to waiting for the next Erlang message. As\n  [`gen_tcp`][gen_tcp] (quite [against][semantics] the usual OTP semantics)\n  doesn't offer a non-blocking way to accept connections (whereas there _is_ a\n  non-blocking way to receive data from the socket), the acceptor processes call\n  `gen_tcp:accept/2` with a timeout, so they can check for system messages every\n  few seconds. One alternative is to spawn [simple][simple] (non-OTP) processes\n  just for blocking in `gen_tcp:accept/1`, and then wake a proper OTP process\n  for handling the new connection, basically implementing the non-blocking\n  mechanism to accept connections that `gen_tcp` doesn't provide. Another option\n  would be using `prim_inet:async_accept/2`, which _does_ offer this\n  functionality. However, that's not a documented interface. In the future, a\n  nicer solution might become available based on the new `socket` backend, which\n  provides a non-blocking [`accept/2`][socket_accept] variant.\n\n- The `textgroup_acceptor` is built as a [special process][special]. It could\n  just as well be implemented as a [generic server][gen_server] with the same\n  behavior. The only reason it wasn't done this way is that most `gen_server`\n  features would remain unused. Matter of taste.\n\n- When a new connection is accepted, the acceptor asks `textgroup_client_sup` to\n  spawn a new process for handling the client. An alternative would be to _not_\n  split the tasks of accepting and handling connections into separate processes:\n  You could spawn a pool of client handler processes that wait for new\n  connections, maybe using the same workaround as the `textgroup_acceptor` to\n  remain responsive. Those handlers would spawn a fresh worker immediately after\n  accepting a connection, handle the connection, and then terminate. This is\n  [suggested][buckets] in [Learn You Some Erlang][lyse] and [Erlang and OTP in\n  Action][action], for example. It would also be consistent with the usual\n  Erlang pattern to create a process for each concurrent _activity_ (processing\n  a client connection from begin to end) rather than each _task_ (accepting\n  connections in one process and then handling them in another). However, for\n  Textgroup, it seemed preferable to have a clear separation of the fixed-size\n  acceptor pool on the one hand and the client handler processes on the other:\n  The advantage is a one-to-one mapping of clients and (fully responsive)\n  handler processes. This allows for asking `textgroup_client_sup` for a list of\n  clients and communication with them without delays. This design would also\n  allow more complex applications to easily close/change the listener socket\n  without disconnecting existing clients.\n\nAll that said, real-world projects will often just use an existing application\n(such as [Ranch][ranch]) for accepting connections.\n\n[erlang]: https://erlang.org\n[rebar3]: https://rebar3.org\n[ops]: https://weiss.github.io/textgroup/operators.html\n[supervision]: https://erlang.org/doc/design_principles/des_princ.html#supervision-trees\n[textgroup_sup]: https://github.com/weiss/textgroup/blob/main/src/textgroup_sup.erl\n[acceptor_sup]: https://github.com/weiss/textgroup/blob/main/src/textgroup_acceptor_sup.erl\n[pool_size]: https://github.com/weiss/textgroup/blob/main/config/sys.config\n[client_sup]: https://github.com/weiss/textgroup/blob/main/src/textgroup_client_sup.erl\n[tree]: https://raw.githubusercontent.com/weiss/textgroup/main/doc/assets/supervision.png\n[acceptor]: https://github.com/weiss/textgroup/blob/main/src/textgroup_acceptor.erl\n[problem]: https://erlang.org/pipermail/erlang-questions/2016-April/088847.html\n[sys]: https://erlang.org/doc/man/sys.html\n[gen_tcp]: https://erlang.org/doc/man/gen_tcp.html\n[gen_server]: https://erlang.org/doc/design_principles/gen_server_concepts.html\n[semantics]: https://erlang.org/pipermail/erlang-questions/2008-February/032912.html\n[simple]: https://erlang.org/pipermail/erlang-questions/2017-August/093142.html\n[socket_accept]: https://erlang.org/doc/man/socket.html#accept-2\n[special]: https://erlang.org/doc/design_principles/spec_proc.html#special-processes\n[gen_server]: https://erlang.org/doc/design_principles/gen_server_concepts.html\n[buckets]: https://learnyousomeerlang.com/buckets-of-sockets#sockserv-revisited\n[lyse]: https://learnyousomeerlang.com\n[action]: https://www.manning.com/books/erlang-and-otp-in-action\n[ranch]: https://ninenines.eu/docs/#ranch","ref":"developers.html#design-hints"}],"content_type":"text/plain"}